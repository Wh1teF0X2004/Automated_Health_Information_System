{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../pipes/to-upper-case.pipe\";\nfunction ListPatientComponent_tr_32_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\")(13, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ListPatientComponent_tr_32_Template_button_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const patient_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.viewPatient(patient_r1.patientId));\n    });\n    i0.ɵɵtext(14, \"Details\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"td\")(16, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ListPatientComponent_tr_32_Template_button_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const patient_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updatePatient(patient_r1.patientId));\n    });\n    i0.ɵɵtext(17, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"td\")(19, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ListPatientComponent_tr_32_Template_button_click_19_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const patient_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.sendPatientId(patient_r1.patientId));\n    });\n    i0.ɵɵtext(20, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const patient_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(patient_r1.patientId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, patient_r1.firstName));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 6, patient_r1.lastName));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(patient_r1.tel);\n  }\n}\nexport let ListPatientComponent = /*#__PURE__*/(() => {\n  class ListPatientComponent {\n    /**\n     * The constructor of this component has two dependencies: the DatabaseService and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     */\n    constructor(dbService, router) {\n      this.dbService = dbService;\n      this.router = router;\n      // Database\n      this.patientDB = [];\n    }\n    /**\n     * @function ngOnInit run when component is initiates\n     * @description called the function listen2patients to fetch patient data from the DatabaseService\n     */\n    ngOnInit() {\n      this.listen2patients();\n    }\n    /**\n     * @function listen2patients fetch patient data from the DatabaseService and store it in a variable so it can be accessed anytime\n     * @description This function fetches patient data from the DatabaseService and store it in a variable so it can be accessed anytime\n     */\n    listen2patients() {\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data;\n      });\n    }\n    /**\n     * @function viewPatient navigates to the view-patient component with the patientId parsed as route prarameter\n     * @param patientId The ID of the patient to be viewed\n     * @description This function navigates to the view-patient component with the patientId parsed as route prarameter\n     */\n    viewPatient(patientId) {\n      this.router.navigate(['/view-patient', patientId]);\n    }\n    /**\n     * @function viewPatient navigates to the update-patient component with the patientId parsed as route prarameter\n     * @param patientId The ID of the patient to be updated\n     * @description This function navigates to the update-patient component with the patientId parsed as route prarameter\n     */\n    updatePatient(patientId) {\n      console.log(\"Update button submit\");\n      this.router.navigate(['/update-patient', patientId]);\n    }\n    /**\n     * @function sendPatientId deletes a patient record from the database based on the patient ID\n     * @param patientId The ID of the patient to be deleted/removed from database\n     * @description After successful deletion, it re-fetches the updated list of patient from the database so the update/action is shown immediately\n     */\n    sendPatientId(patientId) {\n      this.dbService.deletePatient(patientId).subscribe({\n        next: result => {\n          this.dbService.getPatients().subscribe(data => {\n            this.patientDB = data;\n          });\n        },\n        error: error => {\n          this.router.navigate([\"/invalid-data\"]);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ListPatientComponent_Factory(t) {\n      return new (t || ListPatientComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ListPatientComponent,\n      selectors: [[\"app-list-patient\"]],\n      decls: 38,\n      vars: 1,\n      consts: [[1, \"album\", \"py-5\"], [1, \"container\", 2, \"width\", \"95%\", \"margin-bottom\", \"2rem\"], [1, \"my-2\"], [1, \"card\"], [1, \"row\", \"row-cols-1\", \"g-3\"], [1, \"col\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-dark\", \"text-center\", \"text-white\", \"fixed-bottom\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n      template: function ListPatientComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n          i0.ɵɵtext(3, \"Patient Record List\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"div\", 5)(7, \"table\", 6)(8, \"thead\")(9, \"tr\")(10, \"th\")(11, \"strong\");\n          i0.ɵɵtext(12, \"ID\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"th\")(14, \"strong\");\n          i0.ɵɵtext(15, \"First Name\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"th\")(17, \"strong\");\n          i0.ɵɵtext(18, \"Last Name\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"th\")(20, \"strong\");\n          i0.ɵɵtext(21, \"Contact No\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"th\")(23, \"strong\");\n          i0.ɵɵtext(24, \"View\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"th\")(26, \"strong\");\n          i0.ɵɵtext(27, \"Edit\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"th\")(29, \"strong\");\n          i0.ɵɵtext(30, \"Delete\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(31, \"tbody\");\n          i0.ɵɵtemplate(32, ListPatientComponent_tr_32_Template, 21, 8, \"tr\", 7);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(33, \"footer\", 8)(34, \"div\", 9);\n          i0.ɵɵtext(35, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(36, \"a\", 10);\n          i0.ɵɵtext(37, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(32);\n          i0.ɵɵproperty(\"ngForOf\", ctx.patientDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.ToUpperCasePipe]\n    });\n  }\n  return ListPatientComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}