{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Owner/Documents/FYP/automated-health-information-system/MDS2_AHIS/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction AddPrescriptionComponent_option_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 33);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const med_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", med_r2.medication_id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", med_r2.name, \" \");\n  }\n}\nexport let AddPrescriptionComponent = /*#__PURE__*/(() => {\n  class AddPrescriptionComponent {\n    /**\n     * @constructor The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, route, router) {\n      var _this = this;\n      this.dbService = dbService;\n      this.route = route;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      // Database\n      this.patientDB = [];\n      this.physicianDB = [];\n      this.medicationDB = [];\n      this.diagnosisDB = [];\n      // Diagnosis ID\n      this.diagnosisId = \"\";\n      // Target Diagnosis\n      this.targetDiagnosis = {};\n      // Target Patient\n      this.targetPatient = {};\n      // Target Physician\n      this.targetPhysician = {};\n      /**\n       * @summary A prescription object is created based on the form inputs and is submitted to be stored in the MongoDB database.\n       * @description onSubmit is triggered when the html form is submitted and the prescription object is created and sent to the DatabaseService to add it to the MongoDB database.\n      */\n      this.onSubmit = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (form) {\n          let obj = {\n            \"prescription_name\": form.value.prescription_name,\n            \"patient_id\": _this.targetDiagnosis.patientId,\n            \"physician_id\": _this.targetDiagnosis.physicianId,\n            \"medication_id\": form.value.medication_id,\n            \"diagnosisId\": _this.diagnosisId,\n            \"prescription_dosage\": form.value.prescription_dosage,\n            \"prescription_startdate\": form.value.prescription_startdate,\n            \"prescription_enddate\": form.value.prescription_enddate,\n            \"prescription_freqency\": form.value.prescription_freqency,\n            \"prescription_specialinstructions\": form.value.prescription_specialinstructions\n          };\n          console.log(\"prescription obj:\", obj);\n          _this.dbService.addPrescription(obj).subscribe({\n            next: result => {\n              // Successful response\n              _this.router.navigate(['/view-diagnosis', _this.diagnosisId]);\n            },\n            error: error => {\n              // Error handling\n              console.error('Error:', error);\n              _this.router.navigate(['/invalid-data']);\n            }\n          });\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      this.diagnosisId = this.route.snapshot.paramMap.get('diagnosisId');\n      console.log(\"Diagnosis ID: \", this.diagnosisId);\n    }\n    /**\n     * @function ngOnInit fetches diagnosis, patient, and physician data, and retrieves records for the selected diagnosis.\n     */\n    ngOnInit() {\n      // Get all Diagnosis, Patient, and Physician\n      this.getDiagnosisDatabase();\n      this.getPatientDatabase();\n      this.getDoctorDatabase();\n      // Find the Diagnosis\n      this.dbService.getDiagnosis().subscribe(diagnosisDB_param => {\n        console.log(\"Get Diagnosis Record to be obtained: \", this.diagnosisId);\n        for (let allDiagnosis of diagnosisDB_param) {\n          if (allDiagnosis.diagnosisId === this.diagnosisId) {\n            this.targetDiagnosis = allDiagnosis;\n            console.log(\"Diagnosis Record: \", this.targetDiagnosis);\n          }\n        }\n      });\n      // From Diagnosis, get the patient ID (patientId) and physician ID (physicianId)\n      // Target Patient\n      this.dbService.getPatients().subscribe(patientDB_param => {\n        console.log(\"Get Patient Record to be obtained: \", this.targetDiagnosis.patientId);\n        for (let allPatient of patientDB_param) {\n          if (allPatient.patientId === this.targetDiagnosis.patientId) {\n            this.targetPatient = allPatient;\n            console.log(\"Patient Record: \", this.targetPatient);\n          }\n        }\n      });\n      // Target Physician\n      this.dbService.getAllPhysician().subscribe(physicianDB_param => {\n        console.log(\"Get Physician Record to be obtained: \", this.targetDiagnosis.physicianId);\n        for (let allDoctor of physicianDB_param) {\n          if (allDoctor.physician_id === this.targetDiagnosis.physicianId) {\n            this.targetPhysician = allDoctor;\n            console.log(\"Physician Record: \", this.targetPhysician);\n          }\n        }\n      });\n      // Fetch medication from database and format their names for the dropdown\n      this.dbService.getAllMedication().subscribe(data => {\n        this.medicationDB = data.map(med => ({\n          medication_id: med.medication_id,\n          name: `${med.medication_id} - ${med.medicine_name}`\n        }));\n      });\n    }\n    /**\n     * @function getDiagnosisDatabase function fetch the diagnosis records from the MongoDB database\n     * @summary Fetch the diagnosis records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the diagnosis records from the MongoDB database and store it in a variable to be access later\n     */\n    getDiagnosisDatabase() {\n      this.dbService.getDiagnosis().subscribe(data => {\n        this.diagnosisDB = data;\n      });\n    }\n    /**\n     * @function getPatientDatabase function fetch the patient records from the MongoDB database\n     * @summary Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     */\n    getPatientDatabase() {\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data;\n      });\n    }\n    /**\n     * @function getDoctorDatabase function fetch the physician records from the MongoDB database\n     * @summary Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     */\n    getDoctorDatabase() {\n      this.dbService.getAllPhysician().subscribe(data => {\n        this.physicianDB = data;\n      });\n    }\n    static #_ = this.ɵfac = function AddPrescriptionComponent_Factory(t) {\n      return new (t || AddPrescriptionComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddPrescriptionComponent,\n      selectors: [[\"app-add-prescription\"]],\n      decls: 86,\n      vars: 7,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\", \"flex-column\", \"align-items-center\"], [1, \"d-flex\", \"justify-content-between\", \"mb-5\", 2, \"gap\", \"2rem\"], [1, \"card\", 2, \"width\", \"25rem\"], [1, \"card-body\"], [1, \"container\", 2, \"width\", \"100%\"], [1, \"mb-5\"], [1, \"card\", 2, \"width\", \"52rem\"], [1, \"container\", 2, \"width\", \"90%\"], [1, \"card-title\", \"text-center\"], [1, \"sub-header\", \"text-center\"], [\"id\", \"prescriptionForm\", \"novalidate\", \"\", \"action\", \"/add-prescription\", 1, \"needs-validation\", 3, \"ngSubmit\"], [\"prescriptionForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"name\", \"prescription_name\", \"placeholder\", \"Enter prescription name\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"medication_id\"], [\"name\", \"medication_id\", \"placeholder\", \"Select Medication\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"prescription_dosage\"], [\"type\", \"number\", \"name\", \"prescription_dosage\", \"placeholder\", \"Enter medication dosage\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"prescription_freqency\"], [\"type\", \"number\", \"name\", \"prescription_freqency\", \"placeholder\", \"Enter medication consumption frequency\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"prescription_startdate\"], [\"type\", \"date\", \"name\", \"prescription_startdate\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"prescription_enddate\"], [\"type\", \"date\", \"name\", \"prescription_enddate\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"prescription_specialinstructions\"], [\"name\", \"prescription_specialinstructions\", \"placeholder\", \"Enter any potential special instructions\", \"ngModel\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-4\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [3, \"value\"]],\n      template: function AddPrescriptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r3 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"main\", 0)(1, \"section\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\");\n          i0.ɵɵtext(6, \"Physician in charge\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"hr\");\n          i0.ɵɵelementStart(8, \"p\")(9, \"strong\");\n          i0.ɵɵtext(10, \"Physician ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"p\")(13, \"strong\");\n          i0.ɵɵtext(14, \"Physician Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(16, \"div\", 2)(17, \"div\", 3)(18, \"div\", 4)(19, \"h4\");\n          i0.ɵɵtext(20, \"Patient Information\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"hr\");\n          i0.ɵɵelementStart(22, \"p\")(23, \"strong\");\n          i0.ɵɵtext(24, \"Patient ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(25);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"p\")(27, \"strong\");\n          i0.ɵɵtext(28, \"Patient Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(29);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(30, \"section\", 5)(31, \"div\", 6)(32, \"div\", 3)(33, \"div\", 7)(34, \"h1\", 8);\n          i0.ɵɵtext(35, \"Issue Prescription\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"h5\", 9);\n          i0.ɵɵtext(37, \"Fill in the prescription information for the patient\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"p\");\n          i0.ɵɵelementStart(39, \"form\", 10, 11);\n          i0.ɵɵlistener(\"ngSubmit\", function AddPrescriptionComponent_Template_form_ngSubmit_39_listener() {\n            i0.ɵɵrestoreView(_r3);\n            const _r0 = i0.ɵɵreference(40);\n            return i0.ɵɵresetView(ctx.onSubmit(_r0));\n          });\n          i0.ɵɵelementStart(41, \"div\", 12)(42, \"label\", 13);\n          i0.ɵɵtext(43, \"Prescription Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(44, \"input\", 14);\n          i0.ɵɵelementStart(45, \"div\", 15);\n          i0.ɵɵtext(46, \" Please provide a valid name. \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(47, \"p\");\n          i0.ɵɵelementStart(48, \"div\", 12)(49, \"label\", 16);\n          i0.ɵɵtext(50, \"Medication:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(51, \"select\", 17);\n          i0.ɵɵtemplate(52, AddPrescriptionComponent_option_52_Template, 2, 2, \"option\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(53, \"p\");\n          i0.ɵɵelementStart(54, \"div\", 12)(55, \"label\", 19);\n          i0.ɵɵtext(56, \"Medication Dosage:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(57, \"input\", 20);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(58, \"p\");\n          i0.ɵɵelementStart(59, \"div\", 12)(60, \"label\", 21);\n          i0.ɵɵtext(61, \"Consumption Frequency:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(62, \"input\", 22);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(63, \"p\");\n          i0.ɵɵelementStart(64, \"div\", 12)(65, \"label\", 23);\n          i0.ɵɵtext(66, \"Issued Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(67, \"input\", 24);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(68, \"p\");\n          i0.ɵɵelementStart(69, \"div\", 12)(70, \"label\", 25);\n          i0.ɵɵtext(71, \"Consume Before:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(72, \"input\", 26);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(73, \"p\");\n          i0.ɵɵelementStart(74, \"div\", 12)(75, \"label\", 27);\n          i0.ɵɵtext(76, \"Special Instructions:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(77, \"textarea\", 28);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(78, \"p\");\n          i0.ɵɵelementStart(79, \"button\", 29);\n          i0.ɵɵtext(80, \"Issue Prescription\");\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(81, \"footer\", 30)(82, \"div\", 31);\n          i0.ɵɵtext(83, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(84, \"a\", 32);\n          i0.ɵɵtext(85, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(11);\n          i0.ɵɵtextInterpolate1(\" \", ctx.targetPhysician.physician_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate2(\" Dr. \", ctx.targetPhysician.physician_firstName, \" \", ctx.targetPhysician.physician_lastName, \"\");\n          i0.ɵɵadvance(10);\n          i0.ɵɵtextInterpolate1(\" \", ctx.targetPatient.patientId, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate2(\" \", ctx.targetPatient.firstName, \" \", ctx.targetPatient.lastName, \"\");\n          i0.ɵɵadvance(23);\n          i0.ɵɵproperty(\"ngForOf\", ctx.medicationDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm]\n    });\n  }\n  return AddPrescriptionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}