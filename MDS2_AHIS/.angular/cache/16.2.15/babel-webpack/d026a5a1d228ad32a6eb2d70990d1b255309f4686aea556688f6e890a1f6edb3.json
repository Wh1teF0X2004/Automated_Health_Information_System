{"ast":null,"code":"import { ToUpperCasePipe } from 'src/app/pipes/to-upper-case.pipe';\nimport { DateFormatPipe } from 'src/app/pipes/date-format.pipe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../pipes/date-format.pipe\";\nimport * as i4 from \"../../../pipes/to-upper-case.pipe\";\nexport let DisplayPrescriptionComponent = /*#__PURE__*/(() => {\n  class DisplayPrescriptionComponent {\n    /**\n     * @constructor The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, route, router) {\n      this.dbService = dbService;\n      this.route = route;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      // Prescription ID\n      this.prescription_id = \"\";\n      this.objectId = \"\";\n      // Prescription Details\n      this.prescription_name = \"\";\n      this.patient_id = \"\";\n      this.patient_name = \"\";\n      this.physician_id = \"\";\n      this.medication_id = \"\";\n      this.medicine_name = \"\";\n      this.prescription_startdate = new Date();\n      this.prescription_enddate = new Date();\n      this.prescription_freqency = 0;\n      this.prescription_dosage = 0;\n      this.prescription_specialinstructions = \"\";\n      // Database\n      this.medicationDB = [];\n      this.patientDB = [];\n      this.prescriptionDB = [];\n      this.prescription_id = this.route.snapshot.paramMap.get('prescription_id');\n      console.log(\"Prescription ID: \", this.prescription_id);\n    }\n    /**\n     * @function ngOnInit runs when the component is initiated\n     * @description Loads patient, medication, and prescription databases, and retrieves the relevant prescription details\n     */\n    ngOnInit() {\n      // Load patient database \n      this.getPatientDatabase();\n      // Load medication database \n      this.getMedicationDatabase();\n      // Load prescription database\n      this.dbService.getAllPrescription().subscribe(data => {\n        if (data && data.length > 0) {\n          const matchingPrescription = data.find(pre => pre.prescription_id === this.prescription_id);\n          if (matchingPrescription) {\n            this.objectId = matchingPrescription._id;\n            this.prescription_id = matchingPrescription.prescription_id;\n            this.prescription_name = matchingPrescription.prescription_name;\n            this.patient_id = matchingPrescription.patient_id;\n            this.physician_id = matchingPrescription.physician_id;\n            this.medication_id = matchingPrescription.medication_id;\n            this.prescription_startdate = matchingPrescription.prescription_startdate;\n            this.prescription_enddate = matchingPrescription.prescription_enddate;\n            this.prescription_freqency = matchingPrescription.prescription_freqency;\n            this.prescription_dosage = matchingPrescription.prescription_dosage;\n            this.prescription_specialinstructions = matchingPrescription.prescription_specialinstructions;\n            // Get patient and medication names after data has been set\n            this.getPatientName(this.patient_id);\n            this.getMedicationName(this.medication_id);\n          } else {\n            this.router.navigate(['/invalid-data']);\n          }\n        } else {\n          this.router.navigate(['/invalid-data']);\n        }\n      });\n    }\n    /**\n     * @function getPatientDatabase function fetches the patient records from the MongoDB Database\n     * @summary Fetches the patient records from the MongoDB Database then retrieves the patient's name for the current prescription\n     * @description Fetches the patient records from the MongoDB Database then retrieves the patient's name for the current prescription\n     */\n    getPatientDatabase() {\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data;\n        // Retrieve the patient name\n        this.getPatientName(this.patient_id);\n      });\n    }\n    /**\n     * @function getMedicationDatabase function fetches the medication records from the MongoDB Database\n     * @summary Fetches the medication records from the MongoDB Database then retrieves the medication's name for the current prescription\n     * @description Fetches the medication records from the MongoDB Database then retrieves the medication's name for the current prescription\n     */\n    getMedicationDatabase() {\n      this.dbService.getAllMedication().subscribe(data => {\n        this.medicationDB = data;\n        // Retrieve the medication name\n        this.getMedicationName(this.medication_id);\n      });\n    }\n    /**\n     * @function getPatientName function searches the patientDB for a matching patient ID and obtain the patient name that is saved to a variable to be used later\n     * @param patientId The ID of the patient to find\n     * @summary Searches the patientDB for a matching patient ID and obtain the patient name that is saved to a variable to be used later\n     * @description Searches the patientDB for a matching patient ID and obtain the patient name that is saved to a variable to be used later\n     */\n    getPatientName(patientId) {\n      const matchingPatient = this.patientDB.find(patient => patient.patientId === patientId);\n      if (matchingPatient) {\n        const patientFName = matchingPatient.firstName;\n        const patientLName = matchingPatient.lastName;\n        this.patient_name = `${patientFName} ${patientLName}`;\n        return this.patient_name;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * @function getMedicationName function searches the medicationDB for a matching medication ID and obtain the medication name that is saved to a variable to be used later\n     * @param medication_id The ID of the medication to find\n     * @description Searches the medicationDB for a matching medication ID and obtain the medication name that is saved to a variable to be used later\n     */\n    getMedicationName(medication_id) {\n      const matchingMedication = this.medicationDB.find(med => med.medication_id === medication_id);\n      if (matchingMedication) {\n        this.medicine_name = matchingMedication.medicine_name;\n        return this.medicine_name;\n      } else {\n        return this.medicine_name = \"\";\n      }\n    }\n    static #_ = this.ɵfac = function DisplayPrescriptionComponent_Factory(t) {\n      return new (t || DisplayPrescriptionComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DisplayPrescriptionComponent,\n      selectors: [[\"app-display-prescription\"]],\n      features: [i0.ɵɵProvidersFeature([ToUpperCasePipe, DateFormatPipe])],\n      decls: 76,\n      vars: 26,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\"], [1, \"card-body\"], [1, \"container\", 2, \"width\", \"70%\"], [1, \"card-title\", \"text-center\", 2, \"color\", \"#007bff\"], [1, \"row\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"]],\n      template: function DisplayPrescriptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"strong\");\n          i0.ɵɵelement(7, \"hr\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 5)(9, \"p\")(10, \"strong\");\n          i0.ɵɵtext(11, \"Object ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"p\")(14, \"strong\");\n          i0.ɵɵtext(15, \"Prescription ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"p\")(18, \"strong\");\n          i0.ɵɵtext(19, \"Prescription Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(20);\n          i0.ɵɵpipe(21, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(22, \"hr\");\n          i0.ɵɵelementStart(23, \"p\")(24, \"strong\");\n          i0.ɵɵtext(25, \"Physician ID (Issued By):\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(26);\n          i0.ɵɵpipe(27, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"hr\");\n          i0.ɵɵelementStart(29, \"p\")(30, \"strong\");\n          i0.ɵɵtext(31, \"Patient ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(32);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"p\")(34, \"strong\");\n          i0.ɵɵtext(35, \"Patient Full Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(36);\n          i0.ɵɵpipe(37, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"hr\");\n          i0.ɵɵelementStart(39, \"p\")(40, \"strong\");\n          i0.ɵɵtext(41, \"Medication ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(42);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(43, \"p\")(44, \"strong\");\n          i0.ɵɵtext(45, \"Medication Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(46);\n          i0.ɵɵpipe(47, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(48, \"hr\");\n          i0.ɵɵelementStart(49, \"p\")(50, \"strong\");\n          i0.ɵɵtext(51, \"Start consume on:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(52);\n          i0.ɵɵpipe(53, \"dateFormat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(54, \"p\")(55, \"strong\");\n          i0.ɵɵtext(56, \"Finish consume before:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(57);\n          i0.ɵɵpipe(58, \"dateFormat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(59, \"p\")(60, \"strong\");\n          i0.ɵɵtext(61, \"Consumption Frequency:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(62);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(63, \"p\")(64, \"strong\");\n          i0.ɵɵtext(65, \"Consumption Dosage:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(66);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(67, \"p\")(68, \"strong\");\n          i0.ɵɵtext(69, \"Special Instruction:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(70);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(71, \"footer\", 6)(72, \"div\", 7);\n          i0.ɵɵtext(73, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(74, \"a\", 8);\n          i0.ɵɵtext(75, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", ctx.prescription_id, \" Details\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate1(\" \", ctx.objectId, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.prescription_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(21, 14, ctx.prescription_name), \"\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 16, ctx.physician_id), \"\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", ctx.patient_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(37, 18, ctx.patient_name), \"\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", ctx.medication_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(47, 20, ctx.medicine_name), \"\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(53, 22, ctx.prescription_startdate), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(58, 24, ctx.prescription_enddate), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", ctx.prescription_freqency, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.prescription_dosage, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.prescription_specialinstructions, \"\");\n        }\n      },\n      dependencies: [i3.DateFormatPipe, i4.ToUpperCasePipe]\n    });\n  }\n  return DisplayPrescriptionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}