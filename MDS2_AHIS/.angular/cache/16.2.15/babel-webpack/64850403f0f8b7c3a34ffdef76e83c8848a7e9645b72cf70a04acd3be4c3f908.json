{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../pipes/date-format.pipe\";\nfunction ListDiagnosisComponent_tr_35_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\")(2, \"strong\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"dateFormat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\")(14, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ListDiagnosisComponent_tr_35_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const diagnosis_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.viewSelectedDiagnosis(diagnosis_r1.diagnosisId));\n    });\n    i0.ɵɵtext(15, \"Details\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(16, \"td\")(17, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function ListDiagnosisComponent_tr_35_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const diagnosis_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateDiagnosis(diagnosis_r1.diagnosisId));\n    });\n    i0.ɵɵtext(18, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(19, \"td\")(20, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ListDiagnosisComponent_tr_35_Template_button_click_20_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const diagnosis_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.sendDiagnosisId(diagnosis_r1.diagnosisId));\n    });\n    i0.ɵɵtext(21, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const diagnosis_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(diagnosis_r1.diagnosisId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, diagnosis_r1.diagnosisDate));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(diagnosis_r1.diagnosisDescription);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(diagnosis_r1.physicianId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(diagnosis_r1.patientId);\n  }\n}\nexport let ListDiagnosisComponent = /*#__PURE__*/(() => {\n  class ListDiagnosisComponent {\n    /**\n     * @constructor The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, router, route) {\n      this.dbService = dbService;\n      this.router = router;\n      this.route = route;\n      this.diagnosisDB = [];\n    }\n    /**\n     * @function ngOnInit run when component is initiates\n     * @description called the function listen2diagnosiss to fetch diagnosis data from the DatabaseService\n     */\n    ngOnInit() {\n      this.listen2diagnosiss();\n    }\n    /**\n     * @function listen2diagnosiss fetch diagnosis data from the DatabaseService and store it in a variable so it can be accessed anytime\n     * @description This function fetches diagnosis data from the DatabaseService and store it in a variable so it can be accessed anytime\n     */\n    listen2diagnosiss() {\n      this.dbService.getDiagnosis().subscribe(data => {\n        this.diagnosisDB = data;\n      });\n    }\n    /**\n     * @function viewSelectedDiagnosis navigates to the view-diagnosis component with the diagnosisId parsed as route prarameter\n     * @param diagnosisId The ID of the diagnosis to be viewed\n     * @description This function navigates to the view-diagnosis component with the diagnosisId parsed as route prarameter\n     */\n    viewSelectedDiagnosis(diagnosisId) {\n      this.router.navigate(['/view-diagnosis', diagnosisId]);\n    }\n    /**\n     * @function updateDiagnosis navigates to the update-diagnosis component with the diagnosisId parsed as route prarameter\n     * @param diagnosisId The ID of the diagnosis to be updated\n     * @description This function navigates to the update-diagnosis component with the diagnosisId parsed as route prarameter\n     */\n    updateDiagnosis(diagnosisId) {\n      console.log(\"Update button submit\");\n      this.router.navigate(['/update-diagnosis', diagnosisId]);\n    }\n    /**\n     * @function sendDiagnosisId deletes a diagnosis record from the database based on the diagnosis ID\n     * @param diagnosisId The ID of the diagnosis to be deleted/removed from database\n     * @description After successful deletion, it re-fetches the updated list of diagnosis from the database so the update/action is shown immediately\n     */\n    sendDiagnosisId(diagnosisId) {\n      this.dbService.deleteDiagnosis(diagnosisId).subscribe({\n        next: result => {\n          this.dbService.getDiagnosis().subscribe(data => {\n            this.diagnosisDB = data;\n          });\n        },\n        error: error => {\n          this.router.navigate([\"/invalid-data\"]);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ListDiagnosisComponent_Factory(t) {\n      return new (t || ListDiagnosisComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ListDiagnosisComponent,\n      selectors: [[\"app-list-diagnosis\"]],\n      decls: 41,\n      vars: 1,\n      consts: [[1, \"album\", \"py-5\"], [1, \"container\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\"], [1, \"card\"], [\"align\", \"center\", 1, \"my-2\"], [1, \"row\", \"row-cols-1\", \"g-3\"], [1, \"col\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n      template: function ListDiagnosisComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n          i0.ɵɵtext(4, \"Diagnosis Records\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"table\", 6)(8, \"thead\")(9, \"tr\")(10, \"th\")(11, \"strong\");\n          i0.ɵɵtext(12, \"ID\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"th\")(14, \"strong\");\n          i0.ɵɵtext(15, \"Diagnosis Date\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"th\")(17, \"strong\");\n          i0.ɵɵtext(18, \"Treatment Description\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"th\")(20, \"strong\");\n          i0.ɵɵtext(21, \"Physician ID \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"th\")(23, \"strong\");\n          i0.ɵɵtext(24, \"Patient ID\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"th\")(26, \"strong\");\n          i0.ɵɵtext(27, \"View\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"th\")(29, \"strong\");\n          i0.ɵɵtext(30, \"Edit\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(31, \"th\")(32, \"strong\");\n          i0.ɵɵtext(33, \"Delete\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(34, \"tbody\");\n          i0.ɵɵtemplate(35, ListDiagnosisComponent_tr_35_Template, 22, 7, \"tr\", 7);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(36, \"footer\", 8)(37, \"div\", 9);\n          i0.ɵɵtext(38, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(39, \"a\", 10);\n          i0.ɵɵtext(40, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(35);\n          i0.ɵɵproperty(\"ngForOf\", ctx.diagnosisDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.DateFormatPipe]\n    });\n  }\n  return ListDiagnosisComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}