{"ast":null,"code":"import { ToUpperCasePipe } from 'src/app/pipes/to-upper-case.pipe';\nimport { DateFormatPipe } from 'src/app/pipes/date-format.pipe';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../pipes/to-upper-case.pipe\";\nfunction ListPrescriptionComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\")(13, \"a\", 13);\n    i0.ɵɵtext(14, \"Display\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"td\")(16, \"a\", 14);\n    i0.ɵɵtext(17, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"td\")(19, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ListPrescriptionComponent_tr_23_Template_button_click_19_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const pre_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDelete(pre_r1.prescription_id));\n    });\n    i0.ɵɵtext(20, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const pre_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(pre_r1.prescription_id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 6, pre_r1.prescription_name));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 8, ctx_r0.patientNames[pre_r1.patient_id]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 10, pre_r1.physician_id));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/display-prescription/\", pre_r1.prescription_id, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/update-prescription/\", pre_r1.prescription_id, \"\");\n  }\n}\nexport let ListPrescriptionComponent = /*#__PURE__*/(() => {\n  class ListPrescriptionComponent {\n    /**\n     * The constructor of this component has two dependencies: the DatabaseService and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     */\n    constructor(dbService, router) {\n      this.dbService = dbService;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      this.prescriptionDB = [];\n      this.patientDB = [];\n      this.medicationDB = [];\n      this.patientNames = {}; // Store patient names by ID\n    }\n    /**\n     * @function onClick Logs the current prescriptionDB to the console\n     * @summary Logs the current prescriptionDB to the console\n     * @description This is mainly for debugging purposes to verify that the database has been populated\n     */\n    onClick() {\n      console.log(this.prescriptionDB);\n    }\n    /**\n     * @function onDelete deletes a prescription record from the database based on the prescription ID\n     * @param id The ID of the prescription to be deleted/removed from database\n     * @description After successful deletion, it re-fetches the updated list of prescription from the database so the update/action is shown immediately\n     */\n    onDelete(id) {\n      this.dbService.deletePrescriptionById(id).subscribe(() => {\n        this.dbService.getAllPrescription().subscribe(data => {\n          this.prescriptionDB = data;\n          this.assignPatientNames(); // Re-assign patient names after deletion\n        });\n      });\n    }\n    /**\n     * @function ngOnInit fetches both the patient and prescription data simultaneously\n     * @summary This function fetches both the patient and prescription data simultaneously\n     * @description Use forkJoin to wait for both patients and prescriptions to load before proceeding and store the fetched data in the respective variables. Assign patient names after both datasets are loaded completedly.\n     */\n    ngOnInit() {\n      // Wait for both patient data and prescription data to be loaded\n      forkJoin({\n        patients: this.dbService.getPatients(),\n        prescriptions: this.dbService.getAllPrescription()\n      }).subscribe(({\n        patients,\n        prescriptions\n      }) => {\n        this.patientDB = patients;\n        this.prescriptionDB = prescriptions;\n        this.assignPatientNames(); // Assign patient names after both datasets are loaded\n        console.log(\"Patient names: \", this.patientNames);\n      });\n      // Load medication database \n      this.getMedicationDatabase();\n    }\n    /**\n     * @function getMedicationDatabase function fetch the medication records from the MongoDB database\n     * @summary Fetch the medication records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the medication records from the MongoDB database and store it in a variable to be access later\n     */\n    getMedicationDatabase() {\n      this.dbService.getAllMedication().subscribe(data => {\n        this.medicationDB = data;\n      });\n    }\n    /**\n     * @function getPatientName finds the patient's name based on the provided patient ID by searching through the patient database\n     * @description This function finds the patient's name based on the provided patient ID by searching through the patient database\n     * @param patientId The ID of the patient whose name is being retrieved\n     * @returns The full name of the patient as a string, or `null` if the patient is not found\n     */\n    getPatientName(patientId) {\n      const matchingPatient = this.patientDB.find(patient => patient.patientId === patientId);\n      if (matchingPatient) {\n        const patientFName = matchingPatient.firstName;\n        const patientLName = matchingPatient.lastName;\n        return `${patientFName} ${patientLName}`;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * @function assignPatientNames loops through each prescription and assigns the corresponding patient's full name\n     * @description This function loops through each prescription and assigns the corresponding patient's full name\n     * @returns null\n     */\n    assignPatientNames() {\n      this.prescriptionDB.forEach(prescription => {\n        const patientId = prescription.patient_id;\n        const patientName = this.getPatientName(patientId);\n        if (patientName) {\n          this.patientNames[patientId] = patientName;\n        }\n      });\n      console.log(this.patientNames);\n    }\n    static #_ = this.ɵfac = function ListPrescriptionComponent_Factory(t) {\n      return new (t || ListPrescriptionComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ListPrescriptionComponent,\n      selectors: [[\"app-list-prescription\"]],\n      features: [i0.ɵɵProvidersFeature([ToUpperCasePipe, DateFormatPipe])],\n      decls: 29,\n      vars: 1,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\"], [1, \"card-body\"], [1, \"card-title\", \"text-center\"], [1, \"row\", \"row-cols-1\", \"g-3\"], [1, \"col\"], [1, \"table\", \"table-hover\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-dark\", \"text-center\", \"text-white\", \"fixed-bottom\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [\"scope\", \"row\"], [1, \"btn\", \"btn-primary\", 3, \"routerLink\"], [1, \"btn\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-danger\", 3, \"click\"]],\n      template: function ListPrescriptionComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n          i0.ɵɵtext(4, \"Prescription Records\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"table\", 6)(8, \"thead\")(9, \"tr\")(10, \"th\", 7);\n          i0.ɵɵtext(11, \"ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"th\", 7);\n          i0.ɵɵtext(13, \"Prescription Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"th\", 7);\n          i0.ɵɵtext(15, \"Patient Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"th\", 7);\n          i0.ɵɵtext(17, \"Physician-in-charge\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"th\", 7);\n          i0.ɵɵelementStart(19, \"th\", 7);\n          i0.ɵɵtext(20, \"Actions\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"th\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"tbody\");\n          i0.ɵɵtemplate(23, ListPrescriptionComponent_tr_23_Template, 21, 12, \"tr\", 8);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(24, \"footer\", 9)(25, \"div\", 10);\n          i0.ɵɵtext(26, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(27, \"a\", 11);\n          i0.ɵɵtext(28, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(23);\n          i0.ɵɵproperty(\"ngForOf\", ctx.prescriptionDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i2.RouterLink, i4.ToUpperCasePipe]\n    });\n  }\n  return ListPrescriptionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}