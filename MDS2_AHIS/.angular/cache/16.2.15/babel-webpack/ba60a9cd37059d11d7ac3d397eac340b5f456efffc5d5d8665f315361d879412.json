{"ast":null,"code":"import { ToUpperCasePipe } from 'src/app/pipes/to-upper-case.pipe';\nimport { DateFormatPipe } from 'src/app/pipes/date-format.pipe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../pipes/date-format.pipe\";\nimport * as i4 from \"../../../pipes/to-upper-case.pipe\";\nexport let DisplayAppointmentComponent = /*#__PURE__*/(() => {\n  class DisplayAppointmentComponent {\n    /**\n     * The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, route, router) {\n      this.dbService = dbService;\n      this.route = route;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      // Appointment ID\n      this.appointment_id = \"\";\n      this.objectId = \"\";\n      // Appointment Details\n      this.physician_id = \"\";\n      this.physician_name = \"\";\n      this.patient_id = \"\";\n      this.patient_name = \"\";\n      this.appointment_venue = \"\";\n      this.appointment_time = new Date();\n      this.appointment_duration = 0;\n      // Database\n      this.medicationDB = [];\n      this.consultationDB = [];\n      this.patientDB = [];\n      this.physicianDB = [];\n      this.appointmentDB = [];\n      this.appointment_id = this.route.snapshot.paramMap.get('appointment_id');\n      console.log(\"Appointment ID: \", this.appointment_id);\n    }\n    /**\n     * @function ngOnInit Fetches necessary data from the database, including patient, physician, and appointment information\n     * @description This function is called when the component is initialized\n     */\n    ngOnInit() {\n      // Load patient database \n      this.getPatientDatabase();\n      // Load physician database \n      this.getPhysicianDatabase();\n      // Load Appointment database\n      this.dbService.getAllAppointment().subscribe(data => {\n        if (data && data.length > 0) {\n          const matchingAppointment = data.find(pre => pre.appointment_id === this.appointment_id);\n          if (matchingAppointment) {\n            this.objectId = matchingAppointment._id;\n            this.appointment_id = matchingAppointment.appointment_id;\n            this.patient_id = matchingAppointment.patient_id;\n            this.physician_id = matchingAppointment.physician_id;\n            this.appointment_venue = matchingAppointment.appointment_venue;\n            this.appointment_time = matchingAppointment.appointment_time;\n            this.appointment_duration = matchingAppointment.appointment_duration;\n            // Get patient and physician names after data has been set\n            this.getPatientName(this.patient_id);\n            console.log(\"patient name: \", this.patient_name);\n            this.getPhysicianName(this.physician_id);\n            console.log(\"physician name: \", this.physician_name);\n          } else {\n            this.router.navigate(['/invalid-data']);\n          }\n        } else {\n          this.router.navigate(['/invalid-data']);\n        }\n      });\n    }\n    /**\n     * @function getPatientName Fetches the patient's name by their ID from the patient database\n     * @description It looks for a match and concatenates the first and last names\n     * @param patientId The ID of the patient to retrieve the name for\n     * @returns The patient's full name or `null` if not found\n     */\n    getPatientName(patientId) {\n      const matchingPatient = this.patientDB.find(patient => patient.patientId === patientId);\n      if (matchingPatient) {\n        const patientFName = matchingPatient.firstName;\n        const patientLName = matchingPatient.lastName;\n        this.patient_name = `${patientFName} ${patientLName}`;\n        return this.patient_name;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * @function getPhysicianName Fetches the physician's name by their ID from the physician database\n     * @description It concatenates the first and last names of the physician\n     * @param physician_id The ID of the physician to retrieve the name for\n     * @returns The physician's full name or `null` if not found\n     */\n    getPhysicianName(physician_id) {\n      const matchingPhysician = this.physicianDB.find(doctor => doctor.physician_id === physician_id);\n      if (matchingPhysician) {\n        const physicianFName = matchingPhysician.physician_firstName;\n        const physicianLName = matchingPhysician.physician_lastName;\n        this.physician_name = `${physicianFName} ${physicianLName}`;\n        return this.physician_name;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * @function getPatientDatabase function fetch the patient records from the MongoDB database\n     * @summary Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     */\n    getPatientDatabase() {\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data;\n        // Now that the data is loaded, we can safely retrieve the patient name\n        this.getPatientName(this.patient_id);\n      });\n    }\n    /**\n     * @function getPhysicianDatabase function fetch the physician records from the MongoDB database\n     * @summary Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     */\n    getPhysicianDatabase() {\n      this.dbService.getAllPhysician().subscribe(data => {\n        this.physicianDB = data;\n        // Now that the data is loaded, we can safely retrieve the physician name\n        this.getPhysicianName(this.physician_id);\n      });\n    }\n    static #_ = this.ɵfac = function DisplayAppointmentComponent_Factory(t) {\n      return new (t || DisplayAppointmentComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DisplayAppointmentComponent,\n      selectors: [[\"app-display-appointment\"]],\n      features: [i0.ɵɵProvidersFeature([ToUpperCasePipe, DateFormatPipe])],\n      decls: 47,\n      vars: 19,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\", \"border-radius\", \"8px\", \"box-shadow\", \"0 4px 8px rgba(0,0,0,.05)\"], [1, \"card-body\"], [1, \"container\", 2, \"width\", \"70%\"], [1, \"card-title\", \"text-center\", 2, \"color\", \"#007bff\"], [1, \"row\", 2, \"font-size\", \"16px\"], [2, \"padding\", \"10px\", \"border\", \"none\", \"background-color\", \"#007bff\", \"color\", \"white\", \"border-radius\", \"5px\", \"cursor\", \"pointer\", \"font-size\", \"16px\", 3, \"routerLink\"], [1, \"bg-dark\", \"text-center\", \"text-white\", \"fixed-bottom\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"]],\n      template: function DisplayAppointmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"hr\");\n          i0.ɵɵelementStart(7, \"div\", 5)(8, \"p\")(9, \"strong\");\n          i0.ɵɵtext(10, \"Object ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"p\")(13, \"strong\");\n          i0.ɵɵtext(14, \"Appointment ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"p\")(17, \"strong\");\n          i0.ɵɵtext(18, \"Physician-in-Charge:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(19);\n          i0.ɵɵpipe(20, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"p\")(22, \"strong\");\n          i0.ɵɵtext(23, \"Patient:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(24);\n          i0.ɵɵpipe(25, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"p\")(27, \"strong\");\n          i0.ɵɵtext(28, \"Venue:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(29);\n          i0.ɵɵpipe(30, \"toUpperCase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"p\")(32, \"strong\");\n          i0.ɵɵtext(33, \"Appointment Start Time:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(34);\n          i0.ɵɵpipe(35, \"dateFormat\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"p\")(37, \"strong\");\n          i0.ɵɵtext(38, \"Duration of Appointment:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(39);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(40, \"button\", 6);\n          i0.ɵɵtext(41, \" Start Consultation \");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(42, \"footer\", 7)(43, \"div\", 8);\n          i0.ɵɵtext(44, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(45, \"a\", 9);\n          i0.ɵɵtext(46, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", ctx.appointment_id, \" Details\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", ctx.objectId, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.appointment_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate2(\" \", ctx.physician_id, \" - \", i0.ɵɵpipeBind1(20, 11, ctx.physician_name), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate2(\" \", ctx.patient_id, \" - \", i0.ɵɵpipeBind1(25, 13, ctx.patient_name), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 15, ctx.appointment_venue), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(35, 17, ctx.appointment_time), \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" \", ctx.appointment_duration, \" minutes\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/start-consultation/\", ctx.appointment_id, \"\");\n        }\n      },\n      dependencies: [i2.RouterLink, i3.DateFormatPipe, i4.ToUpperCasePipe]\n    });\n  }\n  return DisplayAppointmentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}