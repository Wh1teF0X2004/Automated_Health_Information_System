{"ast":null,"code":"import { ToUpperCasePipe } from 'src/app/pipes/to-upper-case.pipe';\nimport { DateFormatPipe } from 'src/app/pipes/date-format.pipe';\nimport { DateTimeFormatPipe } from 'src/app/pipes/date-time-format.pipe';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../../pipes/to-upper-case.pipe\";\nimport * as i5 from \"../../../pipes/date-time-format.pipe\";\nfunction ListAppointmentComponent_tr_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵpipe(10, \"dateTimeFormat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\")(12, \"a\", 13);\n    i0.ɵɵtext(13, \"View\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"td\")(15, \"a\", 14);\n    i0.ɵɵtext(16, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(17, \"td\")(18, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ListAppointmentComponent_tr_25_Template_button_click_18_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const app_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onDelete(app_r1.appointment_id));\n    });\n    i0.ɵɵtext(19, \"Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(20, \"td\")(21, \"a\", 16);\n    i0.ɵɵtext(22, \" Start \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const app_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(app_r1.appointment_id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 7, app_r1.physician_id));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(app_r1.patient_id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 9, app_r1.appointment_time));\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/display-appointment/\", app_r1.appointment_id, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/update-appointment/\", app_r1.appointment_id, \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/start-consultation/\", app_r1.appointment_id, \"\");\n  }\n}\nexport let ListAppointmentComponent = /*#__PURE__*/(() => {\n  class ListAppointmentComponent {\n    /**\n     * @constructor The constructor of this component has two dependencies: the DatabaseService and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     */\n    constructor(dbService, router) {\n      this.dbService = dbService;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      this.appointmentDB = [];\n      this.patientDB = [];\n      this.doctorDB = [];\n    }\n    /**\n     * @function onClick Logs the current appointmentDB to the console\n     * @summary Logs the current appointmentDB to the console\n     * @description This is mainly for debugging purposes to verify that the database has been populated\n     */\n    onClick() {\n      console.log(this.appointmentDB);\n    }\n    /**\n     * @function onDelete deletes a appointment record from the database based on the appointment ID\n     * @param id The ID of the appointment to be deleted/removed from database\n     * @description After successful deletion, it re-fetches the updated list of appointment from the database so the update/action is shown immediately\n     */\n    onDelete(id) {\n      this.dbService.deleteAppointmentById(id).subscribe(() => {\n        this.dbService.getAllAppointment().subscribe(data => {\n          this.appointmentDB = data;\n        });\n      });\n    }\n    /**\n     * @function ngOnInit fetches the list of all appointment from the database and assigns it to appointmentDB\n     */\n    ngOnInit() {\n      this.dbService.getAllAppointment().subscribe(data => {\n        this.appointmentDB = data;\n      });\n      console.log(this.appointmentDB);\n    }\n    /**\n     * @function getPatientDatabase function fetch the patient records from the MongoDB database\n     * @summary Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the patient records from the MongoDB database and store it in a variable to be access later\n     */\n    getPatientDatabase() {\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data;\n      });\n    }\n    /**\n     * @function getDoctorDatabase function fetch the physician records from the MongoDB database\n     * @summary Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     * @description Fetch the physician records from the MongoDB database and store it in a variable to be access later\n     */\n    getDoctorDatabase() {\n      this.dbService.getAllPhysician().subscribe(data => {\n        this.doctorDB = data;\n      });\n    }\n    static #_ = this.ɵfac = function ListAppointmentComponent_Factory(t) {\n      return new (t || ListAppointmentComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ListAppointmentComponent,\n      selectors: [[\"app-list-appointment\"]],\n      features: [i0.ɵɵProvidersFeature([ToUpperCasePipe, DateFormatPipe, DateTimeFormatPipe])],\n      decls: 31,\n      vars: 1,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\"], [1, \"card-body\"], [1, \"card-title\", \"text-center\"], [1, \"row\", \"row-cols-1\", \"g-3\"], [1, \"col\"], [1, \"table\", \"table-hover\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-dark\", \"text-center\", \"text-white\", \"fixed-bottom\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [\"scope\", \"row\"], [1, \"btn\", \"btn-primary\", 3, \"routerLink\"], [1, \"btn\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"btn\", \"btn-success\", 2, \"background-color\", \"rgb(59, 167, 37)\", \"border-color\", \"rgb(59, 167, 37)\", 3, \"routerLink\"]],\n      template: function ListAppointmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"main\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n          i0.ɵɵtext(4, \"Appointment Records\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"table\", 6)(8, \"thead\")(9, \"tr\")(10, \"th\", 7);\n          i0.ɵɵtext(11, \"ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"th\", 7);\n          i0.ɵɵtext(13, \"Physician ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"th\", 7);\n          i0.ɵɵtext(15, \"Patient ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"th\", 7);\n          i0.ɵɵtext(17, \"Appointment Date Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"th\", 7);\n          i0.ɵɵelementStart(19, \"th\", 7);\n          i0.ɵɵtext(20, \"Actions\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"th\", 7);\n          i0.ɵɵelementStart(22, \"th\", 7);\n          i0.ɵɵtext(23, \"Consultation\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"tbody\");\n          i0.ɵɵtemplate(25, ListAppointmentComponent_tr_25_Template, 23, 11, \"tr\", 8);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(26, \"footer\", 9)(27, \"div\", 10);\n          i0.ɵɵtext(28, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(29, \"a\", 11);\n          i0.ɵɵtext(30, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(25);\n          i0.ɵɵproperty(\"ngForOf\", ctx.appointmentDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i2.RouterLink, i4.ToUpperCasePipe, i5.DateTimeFormatPipe]\n    });\n  }\n  return ListAppointmentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}