{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport let UpdateDiagnosisComponent = /*#__PURE__*/(() => {\n  class UpdateDiagnosisComponent {\n    /**\n     * @constructor The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, router, route) {\n      this.dbService = dbService;\n      this.router = router;\n      this.route = route;\n      // Generate new consultation object\n      this.diagnosis = {\n        physicianId: \"\",\n        patientId: \"\",\n        consultationId: \"\",\n        diagnosisDescription: \"\",\n        diagnosisAdditional: \"\",\n        diagnosisId: \"\"\n      };\n      this.id = \"\";\n      this.patientDB = [];\n      this.aPatient = {};\n      this.consultationDB = [];\n      this.physicianDB = [];\n      this.aPhysician = {};\n      this.aDiagnosis = {};\n    }\n    /**\n     * @function ngOnInit runs when the component is initiated\n     * @description calls various methods to fetch and set the diagnosis, patient, and physician records\n     */\n    ngOnInit() {\n      this.getDiagnosisId();\n      this.getDiagnosisRecord();\n      this.getPatientRecord();\n      this.getPhysicianRecord();\n    }\n    /**\n     * @function getDiagnosisId Retrieves the diagnosis ID from the URL parameters and stores it in the component\n     * @description Retrieves the diagnosis ID from the URL parameters and stores it in the component\n     */\n    getDiagnosisId() {\n      this.route.paramMap.subscribe(params => {\n        this.diagnosis.diagnosisId = params.get('diagnosisId');\n        console.log(\"Get diagnosis Id to update diagnosis: \", this.diagnosis.diagnosisId);\n      });\n    }\n    /**\n     * @function getDiagnosisRecord Fetches all diagnosis records from the database and matches the current diagnosis ID to extract the specific diagnosis\n     * @description Fetches all diagnosis records from the database and matches the current diagnosis ID to extract the specific diagnosis\n     */\n    getDiagnosisRecord() {\n      this.dbService.getDiagnosis().subscribe(consultationDB => {\n        console.log(\"Get diagnosis Id record\", this.diagnosis.diagnosisId);\n        for (let diagnosis of consultationDB) {\n          if (diagnosis.diagnosisId === this.diagnosis.diagnosisId) {\n            this.aDiagnosis = diagnosis;\n            console.log(\"aDiagnosis Record\", this.aDiagnosis);\n            // Updates the component’s Diagnosis fields with the corresponding values from this.aDiagnosis to have it appear \n            //  automatically in the form.\n            this.diagnosis.diagnosisDescription = this.aDiagnosis.diagnosisDescription;\n            this.diagnosis.diagnosisAdditional = this.aDiagnosis.diagnosisAdditional;\n          }\n        }\n      });\n    }\n    /**\n     * @function getPatientRecord Fetches all patient records from the database and matches the patient ID from the diagnosis record\n     * @description Fetches all patient records from the database and matches the patient ID from the diagnosis record\n     */\n    getPatientRecord() {\n      this.dbService.getPatients().subscribe(patientDB => {\n        this.diagnosis.patientId = this.aDiagnosis.patientId;\n        console.log(\"Get Patient Id record\", this.diagnosis.patientId);\n        for (let patient of patientDB) {\n          if (patient.patientId === this.diagnosis.patientId) {\n            this.aPatient = patient;\n            console.log(\"Patient Record\", this.aPatient);\n          }\n        }\n      });\n    }\n    /**\n     * @function getPhysicianRecord Fetches all physician records from the database and matches the physician ID from the diagnosis record\n     * @description Fetches all physician records from the database and matches the physician ID from the diagnosis record\n     */\n    getPhysicianRecord() {\n      this.dbService.getAllPhysician().subscribe(physicianDB => {\n        this.diagnosis.physicianId = this.aDiagnosis.physicianId;\n        for (let dr of physicianDB) {\n          if (dr.physician_id === this.diagnosis.physicianId) {\n            this.aPhysician = dr;\n            console.log(\"physician Record\", this.aPhysician);\n          }\n        }\n      });\n    }\n    /**\n     * @function sendUpdateDiagnosis Sends the updated diagnosis object to the backend via the DatabaseService, and navigates to the view-diagnosis page\n     * @description Sends the updated diagnosis object to the backend via the DatabaseService, and navigates to the view-diagnosis page\n     */\n    sendUpdateDiagnosis() {\n      console.log(\"Send diagnosis object for update\", this.diagnosis);\n      this.dbService.updateDiagnosis(this.diagnosis).subscribe({\n        next: result => {\n          this.router.navigate([\"/view-diagnosis\", this.diagnosis.diagnosisId]);\n        },\n        error: error => {\n          this.router.navigate([\"/invalid-data\"]);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function UpdateDiagnosisComponent_Factory(t) {\n      return new (t || UpdateDiagnosisComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateDiagnosisComponent,\n      selectors: [[\"app-update-diagnosis\"]],\n      decls: 59,\n      vars: 8,\n      consts: [[1, \"row\", \"justify-content-center\"], [1, \"container\", 2, \"width\", \"1000px\", \"margin-bottom\", \"2rem\"], [1, \"card\"], [1, \"container\", 2, \"width\", \"95%\"], [\"align\", \"center\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"mb-3\"], [\"for\", \"description\", 1, \"form-label\"], [\"name\", \"diagnosisDescription\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"diagnosisAdditional\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"]],\n      template: function UpdateDiagnosisComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\", 4);\n          i0.ɵɵtext(5, \"\\u00A0\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"h1\", 4);\n          i0.ɵɵtext(7, \" Edit Medical Diagnosis\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 5)(9, \"h3\", 4);\n          i0.ɵɵtext(10, \"\\u00A0\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 6)(12, \"div\", 3)(13, \"h4\");\n          i0.ɵɵtext(14, \"Physician in charge\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"hr\");\n          i0.ɵɵelementStart(16, \"p\")(17, \"strong\");\n          i0.ɵɵtext(18, \"Physician ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(19);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"p\")(21, \"strong\");\n          i0.ɵɵtext(22, \"Physician Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(23);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(24, \"div\", 6)(25, \"div\", 3)(26, \"h4\");\n          i0.ɵɵtext(27, \"Patient Information\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"hr\");\n          i0.ɵɵelementStart(29, \"p\")(30, \"strong\");\n          i0.ɵɵtext(31, \"Patient ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(32);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"p\")(34, \"strong\");\n          i0.ɵɵtext(35, \"Patient Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(36);\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(37, \"main\")(38, \"div\", 3);\n          i0.ɵɵelement(39, \"hr\");\n          i0.ɵɵelementStart(40, \"h4\");\n          i0.ɵɵtext(41, \"Diagnosis\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(42, \"div\", 7)(43, \"label\", 8);\n          i0.ɵɵtext(44, \"Treatment Description:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(45, \"textarea\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function UpdateDiagnosisComponent_Template_textarea_ngModelChange_45_listener($event) {\n            return ctx.diagnosis.diagnosisDescription = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(46, \"div\", 7)(47, \"label\", 8);\n          i0.ɵɵtext(48, \"Additional Note:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"textarea\", 10);\n          i0.ɵɵlistener(\"ngModelChange\", function UpdateDiagnosisComponent_Template_textarea_ngModelChange_49_listener($event) {\n            return ctx.diagnosis.diagnosisAdditional = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(50, \"hr\");\n          i0.ɵɵelementStart(51, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function UpdateDiagnosisComponent_Template_button_click_51_listener() {\n            return ctx.sendUpdateDiagnosis();\n          });\n          i0.ɵɵtext(52, \"Submit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(53, \"p\");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(54, \"footer\", 12)(55, \"div\", 13);\n          i0.ɵɵtext(56, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(57, \"a\", 14);\n          i0.ɵɵtext(58, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(19);\n          i0.ɵɵtextInterpolate1(\" \", ctx.aPhysician.physician_id, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate2(\" Dr. \", ctx.aPhysician.physician_firstName, \" \", ctx.aPhysician.physician_lastName, \"\");\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate1(\" \", ctx.aPatient.patientId, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate2(\" \", ctx.aPatient.firstName, \" \", ctx.aPatient.lastName, \"\");\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngModel\", ctx.diagnosis.diagnosisDescription);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.diagnosis.diagnosisAdditional);\n        }\n      },\n      dependencies: [i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel]\n    });\n  }\n  return UpdateDiagnosisComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}