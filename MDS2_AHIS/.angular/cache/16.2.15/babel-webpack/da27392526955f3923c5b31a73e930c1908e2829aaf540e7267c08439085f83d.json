{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Owner/Documents/FYP/automated-health-information-system/MDS2_AHIS/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction AddAppointmentComponent_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const doc_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doc_r3.physician_id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", doc_r3.name, \" \");\n  }\n}\nfunction AddAppointmentComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const patient_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", patient_r4.patientId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", patient_r4.name, \" \");\n  }\n}\nexport let AddAppointmentComponent = /*#__PURE__*/(() => {\n  class AddAppointmentComponent {\n    /**\n     * @constructor The constructor of this component has two dependencies: the DatabaseService and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     */\n    constructor(dbService, router) {\n      var _this = this;\n      this.dbService = dbService;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      this.defaultAppointmentDuration = 60;\n      this.patientDB = [];\n      this.physicianDB = [];\n      /**\n       * @summary A appointment object is created based on the form inputs and is submitted to be stored in the MongoDB database.\n       * @description onSubmit is triggered when the html form is submitted and the appointment object is created and sent to the DatabaseService to add it to the MongoDB database.\n      */\n      this.onSubmit = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (form) {\n          let obj = {\n            \"physician_id\": form.value.physician_id,\n            \"patient_id\": form.value.patient_id,\n            \"appointment_venue\": form.value.appointment_venue,\n            \"appointment_time\": form.value.appointment_time,\n            \"appointment_duration\": form.value.appointment_duration\n          };\n          console.log(\"prescription obj:\", obj);\n          _this.dbService.addAppointment(obj).subscribe({\n            next: result => {\n              // Successful response\n              _this.router.navigate(['/list-appointment']);\n            },\n            error: error => {\n              // Error handling\n              console.error('Error:', error);\n              _this.router.navigate(['/invalid-data']);\n            }\n          });\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n    /**\n     * @function ngOnInit fetches patient data, and retrieves records for the selected patient.\n     */\n    ngOnInit() {\n      // Fetch patients from database and format their names for the dropdown\n      this.dbService.getPatients().subscribe(data => {\n        this.patientDB = data.map(patient => ({\n          patientId: patient.patientId,\n          name: `${patient.patientId} - ${patient.firstName} ${patient.lastName}`\n        }));\n      });\n      // Fetch physicians from database and format their names for the dropdown\n      this.dbService.getAllPhysician().subscribe(data => {\n        this.physicianDB = data.map(doctor => ({\n          physician_id: doctor.physician_id,\n          name: `${doctor.physician_id} - ${doctor.physician_firstName} ${doctor.physician_lastName}`\n        }));\n      });\n    }\n    static #_ = this.ɵfac = function AddAppointmentComponent_Factory(t) {\n      return new (t || AddAppointmentComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddAppointmentComponent,\n      selectors: [[\"app-add-appointment\"]],\n      decls: 47,\n      vars: 3,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"52rem\", \"margin-bottom\", \"2rem\"], [1, \"card-body\"], [1, \"container\", 2, \"width\", \"70%\"], [1, \"card-title\", \"text-center\"], [1, \"sub-header\", \"text-center\"], [\"id\", \"appointmentForm\", \"novalidate\", \"\", \"action\", \"/add-appointment\", 1, \"needs-validation\", 3, \"ngSubmit\"], [\"appointmentForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"physician_id\"], [\"name\", \"physician_id\", \"placeholder\", \"Select Phycisian\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"patient_id\"], [\"name\", \"patient_id\", \"placeholder\", \"Select Patient\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"appointment_time\"], [\"type\", \"datetime-local\", \"name\", \"appointment_time\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"appointment_venue\"], [\"type\", \"text\", \"name\", \"appointment_venue\", \"placeholder\", \"Enter appointment venue\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"appointment_duration\"], [\"type\", \"number\", \"name\", \"appointment_duration\", \"placeholder\", \"Enter appointment duration\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-4\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [3, \"value\"]],\n      template: function AddAppointmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r5 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n          i0.ɵɵtext(5, \"Add/Register Appointment\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"h5\", 5);\n          i0.ɵɵtext(7, \"Fill in new appointment details & click submit\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"p\");\n          i0.ɵɵelementStart(9, \"form\", 6, 7);\n          i0.ɵɵlistener(\"ngSubmit\", function AddAppointmentComponent_Template_form_ngSubmit_9_listener() {\n            i0.ɵɵrestoreView(_r5);\n            const _r0 = i0.ɵɵreference(10);\n            return i0.ɵɵresetView(ctx.onSubmit(_r0));\n          });\n          i0.ɵɵelementStart(11, \"div\", 8)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Physician ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"select\", 10);\n          i0.ɵɵtemplate(15, AddAppointmentComponent_option_15_Template, 2, 2, \"option\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(16, \"p\");\n          i0.ɵɵelementStart(17, \"div\", 8)(18, \"label\", 12);\n          i0.ɵɵtext(19, \"Patient ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"select\", 13);\n          i0.ɵɵtemplate(21, AddAppointmentComponent_option_21_Template, 2, 2, \"option\", 11);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(22, \"p\");\n          i0.ɵɵelementStart(23, \"div\", 8)(24, \"label\", 14);\n          i0.ɵɵtext(25, \"Appointment Start Time:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(26, \"input\", 15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(27, \"p\");\n          i0.ɵɵelementStart(28, \"div\", 8)(29, \"label\", 16);\n          i0.ɵɵtext(30, \"Venue:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(31, \"input\", 17);\n          i0.ɵɵelementStart(32, \"div\", 18);\n          i0.ɵɵtext(33, \" Please provide a valid venue. \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(34, \"p\");\n          i0.ɵɵelementStart(35, \"div\", 8)(36, \"label\", 19);\n          i0.ɵɵtext(37, \"Appointment Duration (Minutes):\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"input\", 20);\n          i0.ɵɵlistener(\"ngModelChange\", function AddAppointmentComponent_Template_input_ngModelChange_38_listener($event) {\n            return ctx.defaultAppointmentDuration = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(39, \"p\");\n          i0.ɵɵelementStart(40, \"button\", 21);\n          i0.ɵɵtext(41, \"Add Appointment\");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(42, \"footer\", 22)(43, \"div\", 23);\n          i0.ɵɵtext(44, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(45, \"a\", 24);\n          i0.ɵɵtext(46, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(15);\n          i0.ɵɵproperty(\"ngForOf\", ctx.physicianDB);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.patientDB);\n          i0.ɵɵadvance(17);\n          i0.ɵɵproperty(\"ngModel\", ctx.defaultAppointmentDuration);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm]\n    });\n  }\n  return AddAppointmentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}