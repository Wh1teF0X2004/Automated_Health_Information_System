{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/database.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../../pipes/date-format.pipe\";\nimport * as i6 from \"../../../pipes/to-upper-case.pipe\";\nfunction UpdateAppointmentComponent_tr_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"toUpperCase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"dateFormat\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\")(13, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function UpdateAppointmentComponent_tr_42_Template_button_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const app_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.selectAppointmentButton(app_r1.appointment_id));\n    });\n    i0.ɵɵtext(14, \"Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"td\")(16, \"a\", 19);\n    i0.ɵɵtext(17, \"Display\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const app_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(app_r1.appointment_id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 5, app_r1.patient_id));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(8, 7, app_r1.physician_id));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 9, app_r1.appointment_time));\n    i0.ɵɵadvance(6);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/display-prescription/\", app_r1.appointment_id, \"\");\n  }\n}\nexport let UpdateAppointmentComponent = /*#__PURE__*/(() => {\n  class UpdateAppointmentComponent {\n    /**\n     * The constructor of this component has three dependencies: the DatabaseService, the ActivatedRoute, and the Router\n     * @param dbService Service used to fetch and manage data from the database\n     * @param router Service used for navigation between components/pages\n     * @param route Provides information about the current route in the application\n     */\n    constructor(dbService, route, router) {\n      this.dbService = dbService;\n      this.route = route;\n      this.router = router;\n      this.imageUrl = '../assets/images/banner-sample.png';\n      this.appointment_id = \"\";\n      // Database\n      this.appointmentDB = [];\n      this.patientDB = [];\n      this.medicationDB = [];\n      // Details that can be updated\n      this.newAppointment_venue = \"\";\n      this.newAppointment_time = new Date();\n      this.appointment_id = this.route.snapshot.paramMap.get('appointment_id');\n      console.log(\"appointment id: \", this.appointment_id);\n    }\n    /**\n     * @function ngOnInit fetches the list of all appointments and stores them in a variable to be accessed later\n     * @description This function is called when the component is initialized\n     */\n    ngOnInit() {\n      this.dbService.getAllAppointment().subscribe(data => {\n        this.appointmentDB = data;\n      });\n      console.log(this.appointmentDB);\n    }\n    /**\n     * @function selectAppointmentButton fetches the selected appointment's ID\n     * @description When the user selects an appointment, this function is called to set the selected appointment's ID\n     * @param appointment_id The ID of the selected appointment\n     */\n    selectAppointmentButton(appointment_id) {\n      this.appointment_id = appointment_id;\n    }\n    /**\n     * @function updateButton is called when the user clicks the update button\n     * @description It constructs an object containing the updated details (venue and time), then sends this to the database via the `updateAppointment` method in `DatabaseService`. Upon success or failure, it logs the result and handles errors\n     */\n    updateButton() {\n      const obj = {\n        appointment_id: this.appointment_id,\n        appointment_venue: this.newAppointment_venue,\n        appointment_time: this.newAppointment_time\n      };\n      this.dbService.updateAppointment(obj).subscribe({\n        next: result => {\n          // Successful response\n          console.log(obj);\n          this.dbService.getAllAppointment().subscribe(data => {\n            this.appointmentDB = data;\n          });\n        },\n        error: error => {\n          // Error handling\n          console.log(obj);\n          console.error('Error:', error);\n          this.router.navigate(['/invalid-data']);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function UpdateAppointmentComponent_Factory(t) {\n      return new (t || UpdateAppointmentComponent)(i0.ɵɵdirectiveInject(i1.DatabaseService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UpdateAppointmentComponent,\n      selectors: [[\"app-update-appointment\"]],\n      decls: 48,\n      vars: 4,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"mt-4\"], [1, \"card\", 2, \"width\", \"72rem\", \"margin-bottom\", \"2rem\"], [1, \"card-body\"], [1, \"card-title\", \"text-center\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"name\", \"id\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"datetime-local\", \"name\", \"id\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\", 3, \"click\"], [1, \"row\", \"row-cols-1\", \"g-3\"], [1, \"col\"], [1, \"table\", \"table-hover\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [1, \"bg-dark\", \"text-center\", \"text-white\"], [1, \"text-center\", \"p-3\", 2, \"background-color\", \"rgba(0, 0, 0, 0.2)\"], [1, \"text-white\"], [\"scope\", \"row\"], [1, \"btn\", \"btn-primary\", 2, \"background-color\", \"cadetblue\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"routerLink\"]],\n      template: function UpdateAppointmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n          i0.ɵɵtext(4, \"Select one of the Appointment\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Selected Appointment ID:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"h3\");\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 5);\n          i0.ɵɵtext(12, \"New Appointment Venue:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function UpdateAppointmentComponent_Template_input_ngModelChange_13_listener($event) {\n            return ctx.newAppointment_venue = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"p\");\n          i0.ɵɵelementStart(15, \"label\", 5);\n          i0.ɵɵtext(16, \"New Appointment Time:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"input\", 7);\n          i0.ɵɵlistener(\"ngModelChange\", function UpdateAppointmentComponent_Template_input_ngModelChange_17_listener($event) {\n            return ctx.newAppointment_time = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"p\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function UpdateAppointmentComponent_Template_button_click_19_listener() {\n            return ctx.updateButton();\n          });\n          i0.ɵɵtext(20, \"Update\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(21, \"main\", 0)(22, \"div\", 1)(23, \"div\", 2)(24, \"div\", 9)(25, \"div\", 10)(26, \"table\", 11)(27, \"thead\")(28, \"tr\")(29, \"th\", 12);\n          i0.ɵɵtext(30, \"ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"th\", 12);\n          i0.ɵɵtext(32, \"Patient ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"th\", 12);\n          i0.ɵɵtext(34, \"Physician ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"th\", 12);\n          i0.ɵɵtext(36, \"Appointment Time\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"th\", 12);\n          i0.ɵɵtext(38, \"Update\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"th\", 12);\n          i0.ɵɵtext(40, \"Action\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(41, \"tbody\");\n          i0.ɵɵtemplate(42, UpdateAppointmentComponent_tr_42_Template, 18, 11, \"tr\", 13);\n          i0.ɵɵelementEnd()()()()()()();\n          i0.ɵɵelementStart(43, \"footer\", 14)(44, \"div\", 15);\n          i0.ɵɵtext(45, \" \\u00A9 2024 Built by: \");\n          i0.ɵɵelementStart(46, \"a\", 16);\n          i0.ɵɵtext(47, \"MDS02\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate(ctx.appointment_id);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.newAppointment_venue);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.newAppointment_time);\n          i0.ɵɵadvance(25);\n          i0.ɵɵproperty(\"ngForOf\", ctx.appointmentDB);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.RequiredValidator, i4.NgModel, i2.RouterLink, i5.DateFormatPipe, i6.ToUpperCasePipe]\n    });\n  }\n  return UpdateAppointmentComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}